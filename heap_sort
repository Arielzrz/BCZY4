#堆排序
def heap_sort(nums):
    build_heap(nums)
    for i in range(len(nums)-1,-1,-1):
        nums[0], nums[i] = nums[i], nums[0]
        max_heapify(nums, 0, i)

#构建堆
def build_heap(nums):
    lenght = len(nums)
    for i in range((lenght-1)//2,-1,-1):
        max_heapify(nums, i, lenght)

#将堆的节点向上调整
def max_heapify(nums, i, lenght):#i父节点的位置，length数组长度
    #找到节点的左右孩子节点
    left = i*2+1
    right = i*2+2
    #判断左右孩子节点与父节点的大小
    if left < lenght and nums[left] > nums[i]:
        largest = left
    else:
        largest = i
    if right < lenght and nums[right] > nums[largest]:
        largest = right
    if largest != i:
        nums[i], nums[largest] = nums[largest], nums[i]
        #调整子树
        max_heapify(nums, largest, lenght)

nums = [7,0,0,2,4,3]
if __name__ == "__main__":
    heap_sort(nums)
    print(nums)